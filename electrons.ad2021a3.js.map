{"version":3,"sources":["dist/electrons.js"],"names":["Electrons","Vector","_x","_y","_z","x","y","z","prototype","RotateX","scalarA","scalarB","RotateY","RotateZ","Normalize","magnitude","abs","Distance","a","b","dx","dy","dz","Math","sqrt","Midpoint","Dot","dotProduct","v2","absSquared","crossProduct","getDirection","atan2","add","addTo","subtract","subtractFrom","multiply","scalar","multiplyBy","Zero","RadiansFromDegrees","d","PI","RotationMatrix","canvas","sim","display","Options","r","s","t","radians","cos","sin","Rotate","v","Unrotated","Electron","position","AddExtForce","dp","forcemagnitude","force","UpdatePosition","positionShift","TangentialForce","radialForce","rotmat","GetPosition","ResetForce","CameraCoords","h","horizontal","vertical","Display","pixelsWide","pixelsHigh","zoomFactor","parallaxDistance","Erase","context","clearRect","GetCameraCoords","point","scale","DrawSphere","center","radius","color","origin","rho","xp","zp","tangent","edge","cradius","beginPath","arc","fillStyle","strokeStyle","lineWidth","stroke","DrawLine","startpoint","endpoint","startcolor","endcolor","linedash","startcam","endcam","gradient","createLinearGradient","addColorStop","setLineDash","moveTo","lineTo","Simulation","sphereCenter","eList","AddElectron","p","push","RemoveElectron","length","pop","CountElectrons","Update","n","i","j","tangentialForceList","maxForceMag","tf","forceMag","max","dt","AdjustCountElectrons","newCount","RandomUnitVector","SaveOptions","window","localStorage","setItem","JSON","stringify","e","Render","getContext","zbend","_i","_a","PointColor","isConnectedIndex","level","nextIsConnectedIndex","minDistance","ipos","jpos","distance","threshold","icolor","jcolor","ColorRound","round","min","zlimit","frac","red","blue","UpdatesPerFrame","FrameDelayMillis","MinElectronsCount","MaxElectronsCount","ySpinner","xSpinner","initialTilt","AnimationFrame","setTimeout","random","mag","root","OnEditElectronsCount","electronsCountEdit","document","getElementById","errorMessage","text","value","match","count","parseInt","textContent","blur","onload","LoadOptions","parse","getItem","toFixed","onblur","setAttribute","onkeypress","evt","keyCode","event","preventDefault","width","height"],"mappings":"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","file":"electrons.ad2021a3.js","sourceRoot":"../src","sourcesContent":["var Electrons;\n(function (Electrons) {\n    'use strict';\n    /**\n     * Vector\n     */\n    var Vector = /** @class */ (function () {\n        /**\n         * Creates a new Vector instance using cartesian coordinates\n         *\n         * @param {number} x The x component of the vector\n         * @param {number} y The y component of the vector\n         * @param {number} z The y component of the vector\n         * @memberof Vector\n         */\n        function Vector(_x, _y, _z) {\n            this.x = _x;\n            this.y = _y;\n            this.z = _z;\n        }\n        /**\n         * Rotate X\n         * @param {number} scalarA\n         * @param {number} scalarB\n         * @memberof Vector\n         */\n        Vector.prototype.RotateX = function (scalarA, scalarB) {\n            return new Vector(this.x, scalarA * this.y - scalarB * this.z, scalarB * this.y + scalarA * this.z);\n        };\n        /**\n         * Rotate Y\n         * @param {number} scalarA\n         * @param {number} scalarB\n         * @memberof Vector\n         */\n        Vector.prototype.RotateY = function (scalarA, scalarB) {\n            return new Vector(scalarA * this.x + scalarB * this.z, this.y, scalarA * this.z - scalarB * this.x);\n        };\n        /**\n         * Rotate Z\n         * @param {number} scalarA\n         * @param {number} scalarB\n         * @memberof Vector\n         */\n        Vector.prototype.RotateZ = function (scalarA, scalarB) {\n            return new Vector(scalarA * this.x - scalarB * this.y, scalarB * this.x - scalarA * this.y, this.z);\n        };\n        /**\n         * Converts the vector into a unit vector in the same direction\n         *\n         * @memberof Vector\n         */\n        Vector.prototype.Normalize = function () {\n            var magnitude = this.abs();\n            this.x /= magnitude;\n            this.y /= magnitude;\n            this.z /= magnitude;\n            return this;\n        };\n        /**\n         * Calc distance between 2 given vectors\n         *\n         * @param {Vector} a\n         * @param {Vector} b\n         * @returns {number}\n         */\n        Vector.Distance = function (a, b) {\n            var dx = b.x - a.x;\n            var dy = b.y - a.y;\n            var dz = b.z - a.z;\n            return Math.sqrt(dx * dx + dy * dy + dz * dz);\n        };\n        /**\n         * Get the midpoint vector for 2 given vectors\n         *\n         * @param {Vector} a\n         * @param {Vector} b\n         * @returns {Vector}\n         */\n        Vector.Midpoint = function (a, b) {\n            return new Vector((a.x + b.x) / 2, (a.y + b.y) / 2, (a.z + b.z) / 2);\n        };\n        /**\n         * Finds the dot product\n         *\n         * @param {Vector} a\n         * @param {Vector} b\n         * @returns {number} The dot product of a, b\n         * @memberof Vector\n         */\n        Vector.Dot = function (a, b) {\n            return a.x * b.x + a.y * b.y + a.z * b.z;\n        };\n        /**\n         * Finds the dot product of this vector and another vector\n         *\n         * @param {Vector} v2 The vector to find the dot product with\n         * @returns {number} The dot product of this and the given vector\n         * @memberof Vector\n         */\n        Vector.prototype.dotProduct = function (v2) {\n            //return Vector.Dot(this, v2);\n            return this.x * v2.x + this.y * v2.y + this.z * v2.z;\n        };\n        /**\n         * Finds the dot product of this vector with its self\n         *\n         * @returns {nubler} The dot product\n         * @memberof Vector\n         */\n        Vector.prototype.absSquared = function () {\n            //return Vector.Dot(this, this);\n            return this.x * this.x + this.y * this.y + this.z * this.z;\n        };\n        /**\n         * Returns the sqrt of dot product of this vector\n         *\n         * @returns {nubler} The dot product\n         * @memberof Vector\n         */\n        Vector.prototype.abs = function () {\n            return Math.sqrt(this.absSquared());\n        };\n        /**\n         * Finds the cross product of this vector and another vector\n         *\n         * While the cross product in 2D is not well-defined, it can be calculated in terms of an imaginary z-axis\n         *\n         * @param {Vector} v2 The vector to find the cross product with\n         * @returns {number} The cross product of the two vectors\n         * @memberof Vector\n         */\n        Vector.prototype.crossProduct = function (v2) {\n            return (this.x * v2.y) - (this.y * v2.x);\n        };\n        /**\n         * Gets the direction of the current vector in radians\n         *\n         * The direction is the angle in polar coordinates\n         *\n         * @returns {number} The direction (or angle) of the vector\n         * @memberof Vector\n         */\n        Vector.prototype.getDirection = function () {\n            return Math.atan2(this.y, this.x);\n        };\n        /**\n         * Adds a vector to the current vector, returning the sum as a new vector\n         *\n         * @param {Vector} v2 The vector to add\n         * @returns {Vector} The sum of the two vectors\n         * @memberof Vector\n         */\n        Vector.prototype.add = function (v2) {\n            return new Vector(this.x + v2.x, this.y + v2.y, this.z + v2.z);\n        };\n        /**\n         * Adds a vector to the current vector, modifying the current vector's components to represent\n         * the difference\n         *\n         * @param {Vector} v2 The vector to add\n         * @memberof Vector\n         */\n        Vector.prototype.addTo = function (v2) {\n            this.x += v2.x;\n            this.y += v2.y;\n            this.z += v2.z;\n        };\n        /**\n         * Subtracts a vector from the current vector, returning the difference as a new vector\n         *\n         * @param {Vector} v2 The vector to subtract\n         * @returns {Vector} The difference of the two vectors\n         * @memberof Vector\n         */\n        Vector.prototype.subtract = function (v2) {\n            return new Vector(this.x - v2.x, this.y - v2.y, this.z - v2.z);\n        };\n        /**\n         * Subtracts a vector from the current vector, modifying the current vector's components to represent\n         * the difference\n         *\n         * @param {Vector} v2 The vector to subtract\n         * @memberof Vector\n         */\n        Vector.prototype.subtractFrom = function (v2) {\n            this.x -= v2.x;\n            this.y -= v2.y;\n            this.z -= v2.z;\n        };\n        /**\n         * Multiplies the vector by a scalar value, returning the product as a new vector\n         *\n         * @param {number} scalar The scalar value to multiply the vector by\n         * @returns {Vector} The product of the vector and the scalar\n         * @memberof Vector\n         */\n        Vector.prototype.multiply = function (scalar) {\n            return new Vector(scalar * this.x, scalar * this.y, scalar * this.z);\n        };\n        /**\n         * Multiplies the vector by a scalar value, modifying the current vector's components to represent\n         * the product\n         *\n         * @param {number} scalar The scalar value to multiply the vector by\n         * @memberof Vector\n         */\n        Vector.prototype.multiplyBy = function (scalar) {\n            this.x *= scalar;\n            this.y *= scalar;\n            this.z *= scalar;\n        };\n        // To reset the force on the electron we need the Zero vector\n        Vector.Zero = new Vector(0, 0, 0);\n        return Vector;\n    }());\n    function RadiansFromDegrees(d) {\n        return d * (Math.PI / 180);\n    }\n    /**\n     * RotationMatrix\n     */\n    var RotationMatrix = /** @class */ (function () {\n        /**\n         * Constructor\n         * @param {Vector} r\n         * @param {Vector} s\n         * @param {Vector} t\n         */\n        function RotationMatrix(r, s, t) {\n            this.r = r;\n            this.s = s;\n            this.t = t;\n        }\n        /**\n         * @param {number} radians\n         * @returns {RotationMatrix}\n         * @memberof RotationMatrix\n         */\n        RotationMatrix.prototype.RotateX = function (radians) {\n            var a = Math.cos(radians);\n            var b = Math.sin(radians);\n            return new RotationMatrix(this.r.RotateX(a, b), this.s.RotateX(a, b), this.t.RotateX(a, b));\n        };\n        /**\n         * @param {number} radians\n         * @returns {RotationMatrix}\n         * @memberof RotationMatrix\n         */\n        RotationMatrix.prototype.RotateY = function (radians) {\n            var a = Math.cos(radians);\n            var b = Math.sin(radians);\n            return new RotationMatrix(this.r.RotateY(a, b), this.s.RotateY(a, b), this.t.RotateY(a, b));\n        };\n        /**\n         * @param {number} radians\n         * @returns {RotationMatrix}\n         * @memberof RotationMatrix\n         */\n        RotationMatrix.prototype.RotateZ = function (radians) {\n            var a = Math.cos(radians);\n            var b = Math.sin(radians);\n            return new RotationMatrix(this.r.RotateZ(a, b), this.s.RotateZ(a, b), this.t.RotateZ(a, b));\n        };\n        /**\n         * @returns {Vector}\n         * @param {Vector} v\n         * @memberof RotationMatrix\n         */\n        RotationMatrix.prototype.Rotate = function (v) {\n            return new Vector(v.dotProduct(this.r), v.dotProduct(this.s), v.dotProduct(this.t));\n        };\n        // properties\n        RotationMatrix.Unrotated = new RotationMatrix(new Vector(1, 0, 0), new Vector(0, 1, 0), new Vector(0, 0, 1));\n        return RotationMatrix;\n    }());\n    /**\n     * Electron\n     */\n    var Electron = /** @class */ (function () {\n        /**\n         * Constructor\n         * @param {Vector} position\n         */\n        function Electron(position) {\n            this.position = position.Normalize();\n        }\n        /**\n         * @param {Electron} v2\n         * @returns {void}\n         * @memberof Electron\n         */\n        Electron.prototype.AddExtForce = function (v2) {\n            // Force of electrically charged electrons: F = k*q1*q2/r^2. Set F = 1/r^2.\n            var dp = this.position.subtract(v2.position);\n            var forcemagnitude = 1 / dp.absSquared();\n            var force = dp.Normalize().multiply(forcemagnitude);\n            this.force = this.force.add(force);\n            v2.force = v2.force.subtract(force);\n        };\n        /**\n         * Update electron position. We need to move the electron to the direction of the force while keeping in mind\n         * to constrain its move onto the sphere surface.\n         * @param {Vector} positionShift\n         * @returns {void}\n         * @memberof Electron\n         */\n        Electron.prototype.UpdatePosition = function (positionShift) {\n            this.position = this.position.add(positionShift).Normalize();\n        };\n        /**\n         * Calculate tangential force.\n         * force = radial force + tangential force\n         * @returns {Vector}\n         * @memberof Electron\n         */\n        Electron.prototype.TangentialForce = function () {\n            // Calculate radial component using dot product and subtract to get tangential force\n            var radialForce = this.position.multiply(this.force.dotProduct(this.position));\n            return this.force.subtract(radialForce);\n        };\n        /**\n         * @param rotmat\n         * @memberof Electron\n         */\n        Electron.prototype.Rotate = function (rotmat) {\n            this.position = rotmat.Rotate(this.position);\n        };\n        /**\n         * Position getter\n         */\n        Electron.prototype.GetPosition = function () {\n            return this.position;\n        };\n        /**\n         * Force setter\n         */\n        Electron.prototype.ResetForce = function () {\n            this.force = Vector.Zero;\n        };\n        return Electron;\n    }());\n    /**\n     * CameraCoords\n     */\n    var CameraCoords = /** @class */ (function () {\n        /**\n         * Constructor\n         * @param {number} h\n         * @param {number} v\n         */\n        function CameraCoords(h, v) {\n            this.horizontal = h;\n            this.vertical = v;\n        }\n        return CameraCoords;\n    }());\n    /**\n     * Display\n     */\n    var Display = /** @class */ (function () {\n        /**\n         * Constructor\n         *\n         * @param {number} pixelsWide       // wide number of pixels\n         * @param {number} pixelsHigh       // high number of pixels\n         * @param {number} zoomFactor       // the greater the value the more zoom in\n         * @param {number} parallaxDistance // for scaling effect of distance on perspective\n         * @memberof Display\n         */\n        function Display(pixelsWide, pixelsHigh, zoomFactor, parallaxDistance) {\n            this.pixelsWide = pixelsWide;\n            this.pixelsHigh = pixelsHigh;\n            this.zoomFactor = zoomFactor;\n            this.parallaxDistance = parallaxDistance;\n        }\n        /**\n         * @param {CanvasRenderingContext2D} context\n         * @return void\n         * @memberof Display\n         */\n        Display.prototype.Erase = function (context) {\n            context.clearRect(0, 0, this.pixelsWide, this.pixelsHigh);\n            //context.strokeRect(0, 0, this.pixelsWide, this.pixelsHigh);\n        };\n        /**\n         * GetCameraCoords\n         * @param point\n         * @memberof Display\n         */\n        Display.prototype.GetCameraCoords = function (point) {\n            var scale = this.pixelsWide * this.zoomFactor / (this.parallaxDistance - point.z);\n            var horizontal = scale * point.x;\n            var vertical = scale * point.y;\n            return new CameraCoords(this.pixelsWide / 2 + horizontal, this.pixelsHigh / 2 - vertical);\n        };\n        /**\n         * Draw the sphere.\n         *\n         * @param context\n         * @param center\n         * @param radius\n         * @param color\n         * @memberof Display\n         */\n        Display.prototype.DrawSphere = function (context, center, radius, color) {\n            // NOTE: This isn't quite right. The actual projection of a sphere\n            // onto the pinhole camera screen is an ellipse, not a circle.\n            // This will matter only for very low zoom with very close spheres\n            // that are far off center.\n            var origin = this.GetCameraCoords(center);\n            var rho = radius / this.parallaxDistance;\n            var xp = rho * Math.sqrt(this.parallaxDistance * this.parallaxDistance - radius * radius);\n            var zp = rho * radius;\n            var tangent = center.add(new Vector(xp, 0, zp));\n            var edge = this.GetCameraCoords(tangent);\n            var cradius = Math.abs(edge.horizontal - origin.horizontal);\n            context.beginPath();\n            context.arc(origin.horizontal, origin.vertical, cradius, 0, 2 * Math.PI, true);\n            context.fillStyle = \"white\";\n            context.strokeStyle = color;\n            context.lineWidth = 1;\n            context.stroke();\n            return tangent.z; // the z-value beneath which an electron is \"around the bend\"\n        };\n        /**\n         * Draw line.\n         * @param context\n         * @param startpoint\n         * @param endpoint\n         * @param startcolor\n         * @param endcolor\n         * @param linedash\n         * @memberof Display\n         */\n        Display.prototype.DrawLine = function (context, startpoint, endpoint, startcolor, endcolor, linedash) {\n            var startcam = this.GetCameraCoords(startpoint);\n            var endcam = this.GetCameraCoords(endpoint);\n            var gradient = context.createLinearGradient(startcam.horizontal, startcam.vertical, endcam.horizontal, endcam.vertical);\n            gradient.addColorStop(0, startcolor);\n            gradient.addColorStop(1, endcolor);\n            context.setLineDash(linedash);\n            context.beginPath();\n            context.moveTo(startcam.horizontal, startcam.vertical);\n            context.lineTo(endcam.horizontal, endcam.vertical);\n            context.strokeStyle = gradient;\n            context.lineWidth = 1;\n            context.stroke();\n            context.setLineDash([]);\n        };\n        return Display;\n    }());\n    /**\n     * Simulation\n     */\n    var Simulation = /** @class */ (function () {\n        /**\n         * Constructor\n         */\n        function Simulation() {\n            this.sphereCenter = new Vector(0, 0, 0);\n            this.eList = [];\n        }\n        /**\n         *\n         * @param {Electron} p\n         * @memberof Simulation\n         */\n        Simulation.prototype.AddElectron = function (p) {\n            this.eList.push(p);\n        };\n        /**\n         * @returns {void}\n         * @memberof Simulation\n         */\n        Simulation.prototype.RemoveElectron = function () {\n            if (this.eList.length > 1) {\n                this.eList.pop();\n            }\n        };\n        /**\n         * @returns {number}\n         * @memberof Simulation\n         */\n        Simulation.prototype.CountElectrons = function () {\n            return this.eList.length;\n        };\n        /**\n         * @returns {void}\n         * @memberof Simulation\n         */\n        Simulation.prototype.Update = function () {\n            var n = this.eList.length;\n            for (var i = 0; i < n; ++i) {\n                this.eList[i].ResetForce();\n            }\n            for (var i = 0; i < n - 1; ++i) {\n                for (var j = i + 1; j < n; ++j) {\n                    this.eList[i].AddExtForce(this.eList[j]);\n                }\n            }\n            var tangentialForceList = [];\n            var maxForceMag = 0;\n            for (var i = 0; i < n; ++i) {\n                var tf = this.eList[i].TangentialForce();\n                var forceMag = tf.abs();\n                tangentialForceList.push(tf);\n                maxForceMag = Math.max(maxForceMag, forceMag);\n            }\n            if (maxForceMag > 0) {\n                // We want to move each electron a small distance compared with\n                // the average distance between electrons.\n                // As the number of electrons on the sphere increases, the\n                // average distance between them goes down as an inverse square root.\n                var dt = 0.005 / (maxForceMag * Math.sqrt(n));\n                for (var i = 0; i < n; ++i) {\n                    this.eList[i].UpdatePosition(tangentialForceList[i].multiply(dt));\n                }\n            }\n        };\n        /**\n         * @param {number} newCount\n         * @returns {void}\n         * @memberof Simulation\n         */\n        Simulation.prototype.AdjustCountElectrons = function (newCount) {\n            while (this.CountElectrons() < newCount) {\n                this.AddElectron(new Electron(RandomUnitVector()));\n            }\n            while (this.CountElectrons() > newCount) {\n                this.RemoveElectron();\n            }\n            SaveOptions();\n        };\n        /**\n         * @param {Display} display\n         * @returns {void}\n         * @memberof Simulation\n         */\n        Simulation.prototype.Render = function (display) {\n            // Store the 2D context\n            var context = canvas.getContext('2d');\n            display.Erase(context);\n            var zbend = display.DrawSphere(context, this.sphereCenter, 1.0, '#d9d9d9');\n            for (var _i = 0, _a = this.eList; _i < _a.length; _i++) {\n                var p = _a[_i];\n                display.DrawSphere(context, p.GetPosition(), 0.01, this.PointColor(p.GetPosition(), zbend));\n            }\n            var isConnectedIndex = {};\n            var linedash = [[], [3, 6], [], [1, 5], [1, 10]];\n            for (var level = 0; level < 5; ++level) {\n                // Find the smallest distance between any two (as-yet unconnected) electrons.\n                var nextIsConnectedIndex = {};\n                var minDistance = null;\n                for (var i = 0; i < this.eList.length - 1; ++i) {\n                    if (!isConnectedIndex[i]) {\n                        var ipos = this.eList[i].GetPosition();\n                        for (var j = i + 1; j < this.eList.length; ++j) {\n                            if (!isConnectedIndex[j]) {\n                                var jpos = this.eList[j].GetPosition();\n                                var distance = Vector.Distance(ipos, jpos);\n                                if ((minDistance === null) || (distance < minDistance)) {\n                                    minDistance = distance;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (minDistance === null) {\n                    break; // nothing more to connect\n                }\n                // Connect all pairs of electrons whose distance is not much larger than the minimum.\n                var threshold = 1.005 * minDistance;\n                for (var i = 0; i < this.eList.length - 1; ++i) {\n                    if (!isConnectedIndex[i]) {\n                        var ipos = this.eList[i].GetPosition();\n                        var icolor = this.PointColor(ipos, zbend);\n                        for (var j = i + 1; j < this.eList.length; ++j) {\n                            if (!isConnectedIndex[j]) {\n                                var jpos = this.eList[j].GetPosition();\n                                var distance = Vector.Distance(ipos, jpos);\n                                if (distance <= threshold) {\n                                    var jcolor = this.PointColor(jpos, zbend);\n                                    //console.log(linedash[level]);\n                                    display.DrawLine(context, ipos, jpos, icolor, jcolor, linedash[level]);\n                                    nextIsConnectedIndex[i] = nextIsConnectedIndex[j] = true;\n                                }\n                            }\n                        }\n                    }\n                }\n                for (var i in nextIsConnectedIndex) {\n                    isConnectedIndex[i] = true;\n                }\n            }\n        };\n        /**\n         * @param {number} x\n         * @memberof Simulation\n         */\n        Simulation.prototype.ColorRound = function (x) {\n            return Math.round(255 * Math.min(1, Math.max(0, x)));\n        };\n        /**\n         * When electron travels to the hidden sphere surface gradually change its color.\n         *\n         * @param {Vector} p\n         * @param {number} zlimit\n         * @returns {string}\n         * @memberof Simulation\n         */\n        Simulation.prototype.PointColor = function (p, zlimit) {\n            var frac = (zlimit - p.z) / (zlimit - (-1.1));\n            var red = this.ColorRound(0.2 + (0.8 * frac));\n            var blue = this.ColorRound(1.7 * frac);\n            var green = this.ColorRound(frac);\n            return 'rgb(' + red + ',' + green + ',' + blue + ')';\n        };\n        /**\n         * @param {RotationMatrix} rotmat\n         * @returns {void}\n         * @memberof Simulation\n         */\n        Simulation.prototype.Rotate = function (rotmat) {\n            for (var _i = 0, _a = this.eList; _i < _a.length; _i++) {\n                var p = _a[_i];\n                p.Rotate(rotmat);\n            }\n        };\n        return Simulation;\n    }());\n    // Init params\n    var canvas;\n    var sim;\n    var display;\n    // Conf\n    var UpdatesPerFrame = 10;\n    var FrameDelayMillis = 30;\n    var ZoomFactor = 7;\n    var ParallaxDistance = 15.0;\n    var MinElectronsCount = 2;\n    var MaxElectronsCount = 200;\n    var Options;\n    var ySpinner = RotationMatrix.Unrotated.RotateY(RadiansFromDegrees(0.15));\n    var xSpinner = RotationMatrix.Unrotated.RotateX(RadiansFromDegrees(0.0377));\n    var initialTilt = RotationMatrix.Unrotated.RotateX(RadiansFromDegrees(-15.0));\n    /**\n     * @returns {void}\n     */\n    function AnimationFrame() {\n        sim.Render(display);\n        for (var i = 0; i < UpdatesPerFrame; ++i) {\n            sim.Update();\n        }\n        sim.Rotate(ySpinner);\n        sim.Rotate(xSpinner);\n        window.setTimeout(AnimationFrame, FrameDelayMillis);\n    }\n    /**\n     * Algorithm for picking a random point on a sphere, which avoids clustering of points on the 2 polars region.\n     * http://mathworld.wolfram.com/SpherePointPicking.html\n     * https://angms.science/doc/RM/randUnitVec.pdf\n     * See equations (9), (10), (11) there.\n     * @returns {Vector}\n     */\n    function RandomUnitVector() {\n        while (true) {\n            var a = 1 - 2 * Math.random();\n            var b = 1 - 2 * Math.random();\n            var mag = (a * a) + (b * b);\n            if (mag < 1) {\n                var root = 2 * Math.sqrt(1 - mag);\n                return new Vector(a * root, b * root, 1 - (2 * mag));\n            }\n        }\n    }\n    /**\n     * OnEditElectronsCount\n     */\n    function OnEditElectronsCount() {\n        var electronsCountEdit = document.getElementById('ElectronsCountEditBox');\n        var errorMessage = document.getElementById('ErrorMessage');\n        var text = electronsCountEdit.value;\n        if (text.match(/^[0-9]{1,4}$/)) {\n            var count = parseInt(text);\n            if (count >= MinElectronsCount && count <= MaxElectronsCount) {\n                sim.AdjustCountElectrons(count);\n                errorMessage.textContent = '';\n                electronsCountEdit.blur();\n                return;\n            }\n        }\n        errorMessage.textContent = 'Invalid number of electrons. Must be an integer in the range ' +\n            MinElectronsCount + ' to ' + MaxElectronsCount;\n    }\n    /**\n     * LoadOptions\n     */\n    function LoadOptions() {\n        try {\n            Options = JSON.parse(window.localStorage.getItem('Electrons'));\n        }\n        catch (e) { }\n        if (!Options || typeof Options.CountElectrons !== 'number') {\n            Options = { CountElectrons: 22 };\n        }\n    }\n    /**\n     * SaveOptions\n     */\n    function SaveOptions() {\n        try {\n            Options.CountElectrons = sim.CountElectrons();\n            window.localStorage.setItem('Electrons', JSON.stringify(Options));\n        }\n        catch (e) { }\n    }\n    window.onload = function () {\n        LoadOptions();\n        // var explanationDiv              = document.getElementById('ExplanationDiv');\n        // var hideShowExplanationButton   = document.getElementById('HideShowExplanationButton');\n        var hidePrompt = '&laquo;&nbsp;Κλείσιμο';\n        var showPrompt = 'Πληροφορίες&nbsp;&raquo;';\n        // Get the canvas element from the DOM\n        canvas = document.getElementById('SimCanvas');\n        //canvas.addEventListener('click', OnCanvasClick, false);\n        sim = new Simulation();\n        for (var i = 0; i < Options.CountElectrons; ++i) {\n            sim.AddElectron(new Electron(RandomUnitVector()));\n        }\n        var electronsCountEdit = document.getElementById('ElectronsCountEditBox');\n        electronsCountEdit.value = Options.CountElectrons.toFixed();\n        electronsCountEdit.onblur = OnEditElectronsCount;\n        electronsCountEdit.setAttribute('min', MinElectronsCount.toFixed());\n        electronsCountEdit.setAttribute('max', MaxElectronsCount.toFixed());\n        electronsCountEdit.onkeypress = function (evt) {\n            if (evt.keyCode === 13) {\n                OnEditElectronsCount();\n                event.preventDefault();\n                return false;\n            }\n            return true;\n        };\n        display = new Display(canvas.width, canvas.height, ZoomFactor, ParallaxDistance);\n        sim.Rotate(initialTilt);\n        AnimationFrame();\n    };\n})(Electrons || (Electrons = {}));\n"]}